!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ever-post-client-library",[],t):"object"==typeof exports?exports["ever-post-client-library"]=t():e["ever-post-client-library"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var n=o(r(1)),i=o(r(2));function o(e){return e&&e.__esModule?e:{default:e}}window.EverPostClient=function(){return function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),new n.default(t.meta.navigation.thumbnails).applyVisibility(),new i.default(t.meta.navigation.show_reward,t.body.effective_reward_url).applyVisibility()}}()},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.slugs=t.map(function(e){return e.slug}),this.applyVisibility(),this.applyHrefValue(),this.applySrcValue()}var t,r,i;return t=e,(r=[{key:"applyVisibility",value:function(){var e=this;document.querySelectorAll(".ever-thumbnail").forEach(function(t){var r=t.dataset.everPost;void 0===r&&console.log("[EVER error] A DOM element withever-thumbnail class is missing data-ever-post attribute"),t.querySelectorAll(".ever-thumbnail-on").forEach(function(t){e.slugs.includes(r)?t.style.display="inline-block":t.style.display="none"}),t.querySelectorAll(".ever-thumbnail-off").forEach(function(t){e.slugs.includes(r)?t.style.display="none":t.style.display="inline-block"})})}},{key:"applyHrefValue",value:function(){var e=this;document.querySelectorAll(".ever-thumbnail").forEach(function(t){var r=t.dataset.everPost;t.querySelectorAll("a").forEach(function(t){void 0!==t.dataset.everHrefOn&&e.slugs.includes(r)&&(t.href=t.dataset.everHrefOn),void 0!==t.dataset.everHrefOff&&(e.slugs.includes(r)||(t.href=t.dataset.everHrefOff))})})}},{key:"applySrcValue",value:function(){var e=this;document.querySelectorAll(".ever-thumbnail").forEach(function(t){var r=t.dataset.everPost;t.querySelectorAll("img").forEach(function(t){void 0!==t.dataset.everSrcOn&&e.slugs.includes(r)&&(t.src=t.dataset.everSrcOn),void 0!==t.dataset.everSrcOff&&(e.slugs.includes(r)||(t.src=t.dataset.everSrcOff))})})}}])&&n(t.prototype,r),i&&n(t,i),e}();t.default=i,e.exports=t.default},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.showReward=t,this.effectiveRewardUrl=r,this.applyVisibility(),this.applyHrefValue()}var t,r,i;return t=e,(r=[{key:"applyVisibility",value:function(){var e=this;document.querySelectorAll(".ever-reward-on").forEach(function(t){e.showReward?t.style.display="inline-block":t.style.display="none"}),document.querySelectorAll(".ever-reward-off").forEach(function(t){e.showReward?t.style.display="none":t.style.display="inline-block"})}},{key:"applyHrefValue",value:function(){var e=this;document.querySelectorAll("a.ever-reward").forEach(function(t){t.href=e.effectiveRewardUrl})}}])&&n(t.prototype,r),i&&n(t,i),e}();t.default=i,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,