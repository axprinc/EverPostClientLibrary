!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ever-post-client-library",[],t):"object"==typeof exports?exports["ever-post-client-library"]=t():e["ever-post-client-library"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EverPostClient=void 0;var n,o=(n=r(1))&&n.__esModule?n:{default:n};t.EverPostClient=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),(0,o.default)()}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.slugs=t.map(function(e){return e.slug}),this.applyVisibility(),this.applyHrefValue(),this.applySrcValue()}var t,r,o;return t=e,(r=[{key:"applyVisibility",value:function(){var e=this;document.querySelectorAll(".ever-thumbnail").forEach(function(t){var r=t.dataset["ever-post"];void 0===r&&console.log("A DOM element withever-thumbnail class is missing data-ever-post attribute"),t.querySelectorAll(".ever-thumbnail-on").forEach(function(t){e.slugs.include(r)&&(t.style.display="display-block")}),t.querySelectorAll(".ever-thumbnail-off").forEach(function(t){e.slugs.include(r)||(t.style.display="none")})})}},{key:"applyHrefValue",value:function(){var e=this;document.querySelectorAll(".ever-thumbnail").forEach(function(t){var r=t.dataset["ever-post"];t.querySelectorAll("a").forEach(function(t){void 0!==t.dataset["ever-href-on"]&&e.slugs.include(r)&&(t.href=t.dataset["ever-href-on"]),void 0!==t.dataset["ever-href-off"]&&(e.slugs.include(r)||(t.href=t.dataset["ever-href-off"]))})})}},{key:"applySrcValue",value:function(){var e=this;document.querySelectorAll(".ever-thumbnail").forEach(function(t){var r=t.dataset["ever-post"];t.querySelectorAll("img").forEach(function(t){void 0!==t.dataset["ever-src-on"]&&e.slugs.include(r)&&(t.src=t.dataset["ever-src-on"]),void 0!==t.dataset["ever-src-off"]&&(e.slugs.include(r)||(t.src=t.dataset["ever-src-off"]))})})}}])&&n(t.prototype,r),o&&n(t,o),e}();t.default=o,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,